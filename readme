packages:

sudo apt-get install libmysqlclient-dev 

sudo apt-get install libgtk-3-dev

compling mysql api in c:

gcc mysql.c -o mysql `mysql_config --cflags --libs`

gcc `pkg-config --cflags gtk+-3.0` -o gtk_example gtk_example.c `pkg-config --libs gtk+-3.0`

gcc mynewaes.c -o mynewaes -lcrypto
gcc hash.c -o hash -lcrypto
gcc rsa.c -o rsa -lcrypto

gcc server.c -o server -pthread

First, don't use AES_encrypt and AES_decrypt. They are low level and harder to use. Additionally, it's a software-only routine, and it will never use hardware acceleration, like AES-NI. Finally, its subject to endianess issues on some obscure platforms.

Instead, use the EVP_* interfaces. The EVP_* functions use hardware acceleration, like AES-NI, if available. And it does not suffer endianess issues on obscure platforms.



mysql -u cmpe207 -p

show databases;

use cmpe207

CREATE TABLE t4 (id INT NOT NULL AUTO_INCREMENT,d_username VARCHAR(64) NOT NULL,d_password VARCHAR(64) NOT NULL, d_name VARCHAR(64), d_mobile VARCHAR(64),d_address VARCHAR(64),specality VARCHAR(64),network1 VARCHAR(64),network2 VARCHAR(64),network3 VARCHAR(64), PRIMARY KEY (id,d_username));

describe t4;
+-------------+-------------+------+-----+---------+----------------+
| Field       | Type        | Null | Key | Default | Extra          |
+-------------+-------------+------+-----+---------+----------------+
| id          | int(11)     | NO   | PRI | NULL    | auto_increment |
| d_username  | varchar(64) | NO   | PRI | NULL    |                |
| d_name      | varchar(64) | YES  |     | NULL    |                |
| d_mobile    | varchar(64) | YES  |     | NULL    |                |
| d_address   | varchar(64) | YES  |     | NULL    |                |
| specality   | varchar(64) | YES  |     | NULL    |                |
| in_networks | varchar(64) | YES  |     | NULL    |                |
+-------------+-------------+------+-----+---------+----------------+

CREATE TABLE t1( id INT NOT NULL AUTO_INCREMENT,p_username VARCHAR(64) NOT NULL,password  VARCHAR(64) NOT NULL,first_name VARCHAR(64), last_name VARCHAR(64), DOB DATE, sex CHAR(64), mobile VARCHAR(64), address VARCHAR(64),gmail VARCHAR(64)  ,PRIMARY KEY (id,p_username));

describe t1;
+---------------+-------------+------+-----+---------+----------------+
| Field         | Type        | Null | Key | Default | Extra          |
+---------------+-------------+------+-----+---------+----------------+
| id            | int(11)     | NO   | PRI | NULL    | auto_increment |
| p_username    | varchar(64) | NO   | PRI | NULL    |                |
| password      | varchar(64) | NO   |     | NULL    |                |
| first_name    | varchar(64) | YES  |     | NULL    |                |
| last_name     | varchar(64) | YES  |     | NULL    |                |
| DOB           | varchar(32) | YES  |     | NULL    |                |
| sex           | char(64)    | YES  |     | NULL    |                |
| mobile_number | varchar(64) | YES  |     | NULL    |                |
| address       | varchar(64) | YES  |     | NULL    |                |
| gmail         | varchar(64) | YES  |     | NULL    |                |
+---------------+-------------+------+-----+---------+----------------+


CREATE TABLE t2 (id INT NOT NULL AUTO_INCREMENT,d_username VARCHAR(64),d_name VARCHAR (64),date DATE,time TIME, location VARCHAR(64),service VARCHAR(64),network VARCHAR(64), p_username VARCHAR(64),PRIMARY KEY(id,d_username,time,date));

describe t2;
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| id         | int(11)     | NO   | PRI | NULL    | auto_increment |
| p_username | varchar(64) | YES  |     | NULL    |                |
| d_username | varchar(64) | NO   | PRI | NULL    |                |
| d_name     | varchar(64) | YES  |     | NULL    |                |
| date       | date        | NO   | PRI | NULL    |                |
| time       | time        | NO   | PRI | NULL    |                |
| location   | varchar(64) | YES  |     | NULL    |                |
| service    | varchar(64) | YES  |     | NULL    |                |
| network    | varchar(64) | YES  |     | NULL    |                |
+------------+-------------+------+-----+---------+----------------+

INSERT INTO t2 (d_username,d_name,time,date,location,service,network) VALUES ('doc_0001','Barbara Fu','14:30:00','2018-05-12','santa clara','Physician','Aetna');


CREATE TABLE t3 ( id INT NOT NULL AUTO_INCREMENT,p_username VARCHAR(64) , d_username VARCHAR(64), p_name VARCHAR(64) ,d_name VARCHAR(64) , date DATE, time TIME, location VARCHAR(64), service VARCHAR(64), comments VARCHAR(64) , PRIMARY KEY (id,d_username,p_username,time,date)); 

describe t3;
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| id         | int(11)     | NO   | PRI | NULL    | auto_increment |
| p_username | varchar(64) | NO   | PRI | NULL    |                |
| d_username | varchar(64) | NO   | PRI | NULL    |                |
| p_name     | varchar(64) | YES  |     | NULL    |                |
| d_name     | varchar(64) | YES  |     | NULL    |                |
| date       | date        | NO   | PRI | NULL    |                |
| time       | time        | NO   | PRI | NULL    |                |
| location   | varchar(64) | YES  |     | NULL    |                |
| service    | varchar(64) | YES  |     | NULL    |                |
| comments   | varchar(64) | YES  |     | NULL    |                |
+------------+-------------+------+-----+---------+----------------+


mysql> select * from patient_details;
+----+------------------------+------------------------+----------------------------------+-----------+---------------+------+---------------+---------+-------+
| id | username               | password               | first_name                       | last_name | date_of_birth | sex  | mobile_number | address | gmail |
+----+------------------------+------------------------+----------------------------------+-----------+---------------+------+---------------+---------+-------+
|  1 | dummy_username cmpe207 | dummy_password cmpe207 | 01234567890123456789012345678932 | NULL      | NULL          | NULL | NULL          | NULL    | NULL  |
+----+------------------------+------------------------+----------------------------------+-----------+---------------+------+---------------+---------+-------+
1 row in set (0.00 sec)

DELETE FROM table_name WHERE condition;
DELETE FROM patient_details WHERE id=4;

to display column headings:

select column_name from information_schema.columns where table_name='table'

SELECT column_name,column_type
FROM information_schema.columns
WHERE table_schema = DATABASE()
AND table_name='table'
ORDER BY ordinal_position;

 my_ulonglong mysql_num_rows(MYSQL_RES *result)
Returns the number of rows in the result set. 

use relational database 
patient
provider
insurance company
all

use sprintf and snprintf
snprintf(char *str, size_t size, const char *format, ...);
sprintf(buffer, "Sum of %d and %d is %d", a, b, c);
strncpy(dest, src + beginIndex, endIndex - beginIndex);
 void *memcpy(void *dest, const void *src, size_t n);




use select query with where username='current user'

SELECT COUNT(DISTINCT Country) FROM Customers;
use this command to tell the user how many rows server is going to send.

command(16 bits) data(16 bits) 
if user requests data from database, in data server sends no.of times cilent has to run recv function.

row size is mentioned in command.

command: cmd1024 ==> 


to view tables and table size in a database

SELECT   TABLE_NAME AS `Table`,   ROUND((DATA_LENGTH + INDEX_LENGTH) ) AS `Size (Bytes)` FROM   information_schema.TABLES WHERE   TABLE_SCHEMA = "cmpe207" ORDER BY   (DATA_LENGTH + INDEX_LENGTH) DESC;

'YYYY-MM-DD HH:MM:SS' 	datetime
'YYYY-MM-DD' 		date
HH:MM:SS[.fraction]'	time

inserting date:
INSERT INTO appointments (patient_username,doctor_name,date,time) VALUES ('sjsu','manibo','2011-04-02','10:30:00');


insert into patient_details (username, password, first_name,date_of_birth) value ('haha','uff','lulu','2008-7-04');


update patient_details set date_of_birth="1996-08-26" where id=1;

select doctor_name,date from appointments where patient_username='sjsu';

Encrypt data stored in MySQL using RSA, DSA, or DH encryption algorithms.
Digitally sign messages to confirm the authenticity of the sender (non-repudiation) and the integrity of the message.

http://thinkdiff.net/mysql/encrypt-mysql-data-using-aes-techniques/

INSERT INTO users (username, password) VALUES ('root', AES_ENCRYPT('somepassword','vamshi08'));
SELECT AES_DECRYPT(password, 'vamshi08') FROM users WHERE username = 'root';

How can I verify I'm using SSL to connect to mysql?


creating a new user in database:

GRANT [type of permission] ON [database name].[table name] FROM â€˜[username]'@'localhost';
CREATE USER 'myuser'@'%' IDENTIFIED BY 'mypassword';

https://www.universalclass.com/articles/computers/mysql-administration-managing-users-and-privileges.htm

https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql



user1:
vamshi08
cmpe207
vamshi reddy
verama reddy
1996-08-08
male
6692140080
3346 woodside lane,san jose
vamshi.verama@gmail.com

user2:


user3:




Two advantages of encrypting data stored in a database are: 1) Encryption ensures the privacy of the data stored in the database 2) If the data is intercepted by unauthorized users, encryption prevents the user from reading

client-server encryption:
data privacy and authentication

server-mysql encryption:










-------------------------------------------------------------------------------------------------------------
select AES_DECRYPT(password,'vamshi08') from patient_details where username=AES_ENCRYPT('vamshi08','vamshi08');

INSERT INTO t3 SELECT  t1.p_username,t2.d_username,t1.first_name,t2.d_name,t2.date,t2.time,t2.location,t2.service,t1.last_name FROM t1 INNER JOIN t2 ON AES_DECRYPT(t1.p_username,'vamshi08')=t2.p_username WHERE t1.p_username=AES_ENCRYPT('vamshi08','vamshi08');

INSERT INTO t3 SELECT  t1.p_username,t2.d_username,t1.first_name,t2.d_name,t2.date,t2.time,t2.location,t2.service,t1.last_name FROM t1 INNER JOIN t2 ON t1.p_username=t2.p_username WHERE t1.p_username='vamshi08';


UPDATE t2 SET p_username='vamshi08' WHERE time='11:30:00' and date='2018-05-12' and d_username='doc_0001';
UPDATE t2 SET p_username='ramanujakar' WHERE time='12:30:00' and date='2018-05-12' and d_username='doc_0001';
UPDATE t2 SET p_username='Var_koh' WHERE time='13:30:00' and date='2018-05-12' and d_username='doc_0001';








select t1.name,t1.address,t2.department from t1  join t2 ON t1.name=t2.name WHERE department='ee';

INSERT INTO t3 SELECT t1.name,t2.department,t1.address FROM t1 INNER JOIN t2 ON t1.name=t2.name;

INSERT INTO t3 SELECT t1.name,t2.department,t1.address FROM t1 INNER JOIN t2 ON t1.name=t2.name WHERE t1.name='varsha';


select t1.name,t1.address,t2.department from t1  join t2  WHERE t2.department='ee' and t1.name='ram';
RENAME TABLE available_appointments TO t2;
RENAME TABLE patient_details TO t1;
RENAME TABLE appointments TO t3;
ALTER TABLE t3  CHANGE COLUMN specality service VARCHAR(64);


UPDATE t2 INNER JOIN t1 ON t1.name=t2.name SET t2.address=t1.address WHERE t1.name='ram';
UPDATE t2  INNER JOIN t1 ON t1.name=t2.name SET t2.address=t1.address WHERE t1.name='vamshi';
